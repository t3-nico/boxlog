---
description: 
globs: 
alwaysApply: false
---
# .cursorrules

# ────────────────────────────────
# 1. プロジェクト構成・アーキテクチャ
# ────────────────────────────────
- Use a clear directory structure:  
  - frontend/, backend/, shared/  
  - tests/, scripts/, docs/  
- Enforce module boundaries:  
  - frontend only imports from shared or frontend  
  - backend only imports from shared or backend

# ────────────────────────────────
# 2. コーディング・型安全性
# ────────────────────────────────
- Always use strict TypeScript (no `any`).  
- Fix all TS errors and warnings before merging.  
- Use async/await for asynchronous code with proper try/catch.

# ────────────────────────────────
# 3. 命名規則・可読性
# ────────────────────────────────
- camelCase for variables/functions, PascalCase for types/classes.  
- Prefix React hooks with `use` (e.g. `useFetch`).  
- Extract repeated logic into reusable helpers in shared/.

# ────────────────────────────────
# 4. API 設計・エラーハンドリング
# ────────────────────────────────
- Follow RESTful naming: `/api/users`, `/api/users/:id`.  
- Validate inputs and return HTTP 4xx/5xx with JSON `{ error: string }`.  
- Catch all unhandled errors and log with timestamp.

# ────────────────────────────────
# 5. Tailwind CSS
# ────────────────────────────────
- Use utility-first classes (e.g. `px-4`, `text-center`).  
  # px-4 → 左右1remパディング, text-center → テキスト中央  
- Group related utilities and comment complex blocks.  
  # /* ボタン基本 */  
- For repeated patterns, use `@apply` in CSS.  
- Always add responsive prefixes: `sm:`, `md:`, `lg:`.

# ────────────────────────────────
# 6. アクセシビリティ
# ────────────────────────────────
- All interactive elements need `role`/`aria-` attributes.  
- Ensure color contrast ≥ 4.5:1.  
- Use semantic HTML (e.g. `<button>`, `<nav>`).

# ────────────────────────────────
# 7. ドキュメント・コメント
# ────────────────────────────────
- Add JSDoc to public functions/classes.  
- Maintain an up-to-date docs/README.md with setup & usage.  
- Use OpenAPI spec for backend → docs/api.yaml.

# ────────────────────────────────
# 8. テスト
# ────────────────────────────────
- Unit tests with Jest (≥80% coverage).  
- Integration tests for API endpoints.  
- E2E tests with Playwright or Cypress for critical flows.

# ────────────────────────────────
# 9. パフォーマンス・最適化
# ────────────────────────────────
- Lazy-load heavy components (React.lazy/Suspense).  
- Optimize loops & data transformations.  
- Remove unused imports/dependencies.

# ────────────────────────────────
# 10. CI／CD & コミット
# ────────────────────────────────
- Conventional Commits: `feat: 、fix: 、chore:` など。  
- Pre-commit hooks: lint, type-check, test.  
- On push to main: auto-deploy to staging/production.

# ────────────────────────────────
# 11. セキュリティ
# ────────────────────────────────
- Never commit secrets or env files.  
- Validate and sanitize user inputs.  
- Use HTTPS and secure cookies (SameSite, HttpOnly).

# ────────────────────────────────
# 12. モニタリング・ロギング
# ────────────────────────────────
- Log key events (user signup/login, errors) with timestamps.  
- Integrate Sentry or equivalent for error tracking.
